{"version":3,"sources":["webpack:///./src/utils.js","webpack:///./src/components/layout.js","webpack:///./src/templates/artists.js"],"names":["createSlug","Text","toLowerCase","replace","Container","styled","div","Content","Layout","children","data","useStaticQuery","siteTitle","site","siteMetadata","title","List","ul","Item","li","Image","img","Releases","Release","Title","h2","Description","section","Links","artists","pageContext","map","artist","index","node","description","image","links","releases","key","src","alt","to","rel","link","text","url","href","target","length","release"],"mappings":"4FAAA,sCAAMA,EAAa,SAACC,GAChB,OAAOA,EACFC,cACAC,QAAQ,KAAM,KACdA,QAAQ,WAAY,M,kCCJ7B,qFAiBMC,EAAYC,IAAOC,IAAV,wEAAGD,CAAH,0DAKTE,EAAUF,IAAOC,IAAV,sEAAGD,CAAH,oGAuCEG,IA1BA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVC,EAAOC,yBAAe,cAU5B,OACE,kBAACP,EAAD,KACE,kBAAC,IAAD,CAAQQ,UAAWF,EAAKG,KAAKC,aAAaC,QAC1C,kBAACR,EAAD,KACE,8BAAOE,IAET,kBAAC,IAAD,S,oCCpDN,4FAOMO,EAAOX,IAAOY,GAAV,oEAAGZ,CAAH,2BAGJa,EAAOb,IAAOc,GAAV,oEAAGd,CAAH,2CAIJe,EAAQf,IAAOgB,IAAV,qEAAGhB,CAAH,qDAMLE,EAAUF,IAAOC,IAAV,uEAAGD,CAAH,wDAMPiB,EAAWjB,IAAOY,GAAV,wEAAGZ,CAAH,uGASRkB,EAAUlB,IAAOc,GAAV,uEAAGd,CAAH,sEASPmB,EAAQnB,IAAOoB,GAAV,qEAAGpB,CAAH,MACLqB,EAAcrB,IAAOsB,QAAV,2EAAGtB,CAAH,MACXuB,EAAQvB,IAAOsB,QAAV,qEAAGtB,CAAH,MAEI,sBAAsB,IAC3BwB,EAD0B,EAAlBC,YACRD,QACR,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKd,MAAM,YACX,uCACA,kBAACC,EAAD,KACGa,EAAQE,KAAI,SAACC,EAAQC,GAAW,IAAD,EACyBD,EAAOE,KAAtDnB,EADsB,EACtBA,MAAOoB,EADe,EACfA,YAAaC,EADE,EACFA,MAAOC,EADL,EACKA,MAAOC,EADZ,EACYA,SAC1C,OACE,kBAACpB,EAAD,CAAMqB,IAAKN,GACT,kBAACb,EAAD,CAAOoB,IAAKJ,EAAOK,IAAI,oBACvB,kBAAClC,EAAD,KACE,kBAACiB,EAAD,KACE,kBAAC,OAAD,CAAMkB,GAAE,YAAc1C,YAAWe,GAAU4B,IAAI,QAC5C5B,IAGL,kBAACW,EAAD,KAAcS,GACbE,GACC,kBAACT,EAAD,eACU,IACPS,EAAMN,KAAI,SAACa,EAAMX,GAAW,IACnBY,EAAcD,EAAdC,KAAMC,EAAQF,EAARE,IAEd,OACE,0BAAMP,IAAKN,GACT,uBACEc,KAAMD,EACNE,OAAO,SACPL,IAAI,uBAEHE,GAEFZ,EAAQI,EAAMY,OAAS,GAAK,0CAC5BhB,IAAUI,EAAMY,OAAS,GAAK,gDAfvC,MAuBHX,GACC,kBAAChB,EAAD,KACGgB,EAASP,KAAI,SAACmB,EAASjB,GACtB,OACE,kBAACV,EAAD,CAASgB,IAAKN,GACZ,yBAAKO,IAAKU,EAAQd,MAAOK,IAAI","file":"component---src-templates-artists-js-d2362aa99d611f7f359d.js","sourcesContent":["const createSlug = (Text) => {\n    return Text\n        .toLowerCase()\n        .replace(/ /g, '-')\n        .replace(/[^\\w-]+/g, '')\n        ;\n}\n\nexport { createSlug }","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport Footer from \"./footer\"\nimport \"./layout.css\"\n\nimport styled from \"styled-components\"\n\nconst Container = styled.div`\n  display: flex;\n  min-height: 100vh;\n  flex-direction: column;\n`\nconst Content = styled.div`\n  flex: 1;\n  padding-left: 50px;\n  padding-right: 50px;\n  main {\n    max-width: 1024px;\n    margin: auto;\n  a {\n    color: black;\n  }\n}\n`\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <Container>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <Content>\n        <main>{children}</main>\n      </Content>\n      <Footer />\n    </Container>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import { Link } from \"gatsby\"\nimport React from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { createSlug } from \"../utils\"\nimport styled from \"styled-components\"\n\nconst List = styled.ul`\n  list-style-type: none;\n`\nconst Item = styled.li`\n  text-align: right;\n  margin-bottom: 256px;\n`\nconst Image = styled.img`\n  width: 100%;\n  @media (min-width: 768px) {\n    width: 33%;\n  }\n`\nconst Content = styled.div`\n  width: 100%;\n  @media (min-width: 768px) {\n    width: 66.66%;\n  }\n`\nconst Releases = styled.ul`\n  list-style-type: none;\n  width: 100%;\n  @media (min-width: 768px) {\n    width: 66.66%;\n  }\n  padding: 0;\n  margin-top: 20px;\n`\nconst Release = styled.li`\n  display: inline-block;\n  width: 20%;\n  img {\n    width: 100%;\n  }\n  margin-left: 15px;\n`\n\nconst Title = styled.h2``\nconst Description = styled.section``\nconst Links = styled.section``\n\nexport default ({ pageContext }) => {\n  const { artists } = pageContext\n  return (\n    <Layout>\n      <SEO title=\"artists\" />\n      <h1>artists</h1>\n      <List>\n        {artists.map((artist, index) => {\n          const { title, description, image, links, releases } = artist.node\n          return (\n            <Item key={index}>\n              <Image src={image} alt=\"cover of artist\"></Image>\n              <Content>\n                <Title>\n                  <Link to={`/artists/${createSlug(title)}`} rel=\"stop\">\n                    {title}\n                  </Link>\n                </Title>\n                <Description>{description}</Description>\n                {links && (\n                  <Links>\n                    more on{\" \"}\n                    {links.map((link, index) => {\n                      const { text, url } = link\n\n                      return (\n                        <span key={index}>\n                          <a\n                            href={url}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                          >\n                            {text}\n                          </a>\n                          {index < links.length - 2 && <>, </>}\n                          {index === links.length - 2 && <> or </>}\n                        </span>\n                      )\n                    })}\n                    .\n                  </Links>\n                )}\n              </Content>\n              {releases && (\n                <Releases>\n                  {releases.map((release, index) => {\n                    return (\n                      <Release key={index}>\n                        <img src={release.image} alt=\"cover of release\"></img>\n                      </Release>\n                    )\n                  })}\n                </Releases>\n              )}\n            </Item>\n          )\n        })}\n      </List>\n    </Layout>\n  )\n}\n"],"sourceRoot":""}